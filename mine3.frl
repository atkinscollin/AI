% == Helper Functions ==
%reload "tester.frl"

((len () 0))
((len (X|Y) C)(len Y C1)(sum C1 1 C))

% === Hybrid Search ===

% call: ?((solve_Hyb 3 a b LL))
% Top level predicate of hyb
((solve_Hyb T S G SOL)
  %(kill goal)
  %(addcl ((goal G)))
  (if (less T 0) ((p 'T less than 0, running DF.')(solve_DF S G))
    ((p 'T greater than 0.')(pp))
  )
  (if (greater T 5) ((p 'T greater than 5, running BF.')(solve_BF S G LL))
    ((p 'T less than 5.')(pp))
  )
  %call hyb search here
  (if (greater T 0)
    ((if (less T 5)
      ((p 'In the middle, running hybrid.')(hyb_search T S G SOL))
    ((p 'Hyb Fail 1')(pp))
    ))
    ((p 'Hyb Fail 2')(pp))
  )
  %(delcl ((goal G)))
)


/*
%need to finish
((hyb_search T)
  (goal X))
*/

% Recursive, called by solve hyb
((hyb_search T S G SOL)
  (if (eq S G)
      ((p SOL)(abort))             %if1
      ((if (less 10 T)       %else1
          ((solve_DF S G))          %if2
          ((if (greater_eq T 1)      %else2
            ((hyb_breadthF T ((S)) S1)(reverse S1 SOL))    %if3
            ((pp)(p 'how the hell we get here'))           %else3
          ))
      ))
  )
)

((hyb_breadthF (T (X|T) | PATHS) (X|T))
  (goal X))

((hyb_breadthF T (PAth | TPaths) SOL)
  %finds one step expansions
  (expand PAth NPaths)

  %appends the result: a list of partial paths
  (append TPaths NPaths NEWPATHS)

  %restarts with the new paths
  (p NEWPATHS)
  (hyb_search T S G NEWPATHS)
)












% === Breadth First Search ===
% To call:
%   ?((solve_BF S G SOL)(pp)(p SOL))
%   Where S is the starting node, G is the goal node,
%   and SOL is the outputted solution as a list.

% Called by solve_BF
% Recurring func, stops when path head is goal
((breadthF ((X|T) | PATHS) (X|T))
  (goal X))

((breadthF (PAth | TPaths) SOL)
  %finds one step expansions
  (expand PAth NPaths)

  %appends the result: a list of partial paths
  (append TPaths NPaths NEWPATHS)

  %restarts with the new paths
  (breadthF NEWPATHS SOL)
)

% Called in breadthF
% Expands tree/graph/etc. to find all one step expansions of current path
((expand (HPath|TPath) NPaths)
  (findall (NEXT HPath|TPath)
    ((path HPath NEXT)(negg member NEXT (HPath|TPath)))NPaths
  )
)

% Top level predicate of BF
((solve_BF S G SOL)
  (kill goal)
  (addcl ((goal G)))
  (breadthF ((S)) S1)
  (reverse S1 SOL)
  (pp)(pp 'The solution is: ')
  (pretty_print_solution SOL)
  (delcl ((goal G)))
)












% === Depth First Search ===
% To call:
%   ?((solve_DF S G))
%   Where S is the starting node, and G is the goal node.


% Called by depthF
% Recursive function, ends when goal X is reached
((go X (X) _ )
  (goal X)
)

((go X (X|YPath) L)
  (path X Y)
  (go Y YPath (Y|L))
)

% Called by solve_DF
((depthF S P L)
  % Finishes when go completes recursion
  (go S P L)
  (pp)(pp 'The solution is: ')
  (pretty_print_solution P)
  (get_user_input Y)
)

((depthF S P L)
  (print_end))

% Gets user input to see if they want to solve for another solution
((get_user_input Y)
  (pp)(p 'Find more solutions? y or n? ')
  (r Y)
  (eq Y n)
)

% Top level predicate of DF
((solve_DF S G)
  (kill goal)
  (addcl ((goal G)))
  (depthF S P (S))
  (delcl ((goal G)))
)

/* graph example */
((connect a b))
((connect a d))
((connect a f))

((connect b c))
((connect b f))

((connect d e))
((connect f e))

((connect c e))

((path X Y)(connect X Y))
((path X Y)(connect Y X))

/* auxiliary predicates */

((greater X Y) (less Y X))

((greater_eq X Y) (less_eq Y X))

((member H (H|_)))
((member X (H|T))
  (member X T)
)

((print ())(p success))
((print (H | T))
  (p H ">>>")
  (pp)(print T)
)

((print_end)
  (pp 'No more solutions')
)

((reverse () ()))
((reverse (H|T) R)(reverse T RT)(append RT (H) R))

((append () L L))
((append (H|T) L2 (H|L))(append T L2 L))

((pretty_print_solution () ))
((pretty_print_solution (H|T))
  (p H '->')
  (pretty_print_solution T)
)
